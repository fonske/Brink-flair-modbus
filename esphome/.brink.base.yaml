# base configuration, used in all cases.

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  on_boot:
    priority: 200
    then:
      - script.execute: on_boot

# Enable Home Assistant API
api:

# Enable OTA updates  
ota:
  - platform: esphome
  
# dashboard_import:
#   package_import_url: https://github.com/fonske/Brink-flair-modbus

# Sync time
time:
  - platform: sntp
    id: brink_sntp_time
    timezone: ${timezone}
    on_time_sync:
      then:
        - logger.log: "Synchronized sntp clock"

script:
###  On reboot or powerloss of the esp, set the command to Modbus Step instead of Device LCD which is the default.
  - id: on_boot
    then:
      - lambda: |-
          auto new_value = 1;

          esphome::modbus_controller::ModbusController *controller = id(${name});
          auto set_value_cmd = esphome::modbus_controller::ModbusCommandItem::create_write_single_command(
            controller, 8000, new_value);

          delay(20) ;
          controller->queue_command(set_value_cmd);

## Option for multiple DS18b20's on last 3 terminals -/S(ignal)/+ 
## Comment with # if not used.
### DS18b20's ###
#dallas:
#  - pin: 8
#    update_interval: 30s

###  Settings Brink Flair (no need to change normally)
###  menu 14-Communication: TypeBus=Modbus, Slave Address=20, Baudrate=19200, Parity=Even

modbus:
  id: modbus_brink
  send_wait_time: 200ms

modbus_controller:
  - id: ${name}
    ## Brink Modbus slaveaddress 20
    address: ${modbusaddress} 
    command_throttle: 200ms
    setup_priority: -10
    update_interval: 10s

sensor:

## Option for multiple DS18b20 on last 3 terminals -/Signal/+ 
## Comment with # if not used.
## 2x ds18b20: 
#  - platform: dallas
#    address: 0x233c01f095e2ca28  ##find adress in esphome log
#    name: Temperature 1
#    id: temperature_1
#    filters:
#    - filter_out: NAN
#    - offset: 0.3

#  - platform: dallas
#    address: 0x903c01f095ea8128  ##find adress in esphome log
#    name: Temperature 2
#    id: temperature_2
#    filters:
#   - filter_out: NAN
#   - offset: 0.1

#  - platform: dallas
#    address: 0xcd3c01f095d5a128  ##find adress in esphome log
#    name: Temperature 3
#    id: temperature_3
#    filters:
#    - filter_out: NAN
#    - offset: -0.1

#  - platform: dallas
#    address: 0x633c01f095619f28  ##find adress in esphome log
#    name: Temperature 4
#    id: temperature_4
#    filters:
#    - filter_out: NAN
#    - offset: 0.0

  - id: brink_temp_to_inside
    name: ${brink_temp_to_inside}
    platform: modbus_controller
    modbus_controller_id: ${name}
    address: 4036
    device_class: temperature
    unit_of_measurement: "°C"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    state_class: measurement
    filters:
      - multiply: 0.1

  - id: brink_humidity_to_inside
    name: ${brink_humidity_to_inside}
    icon: "mdi:water-percent"
    platform: modbus_controller
    modbus_controller_id: ${name}
    register_type: read
    address: 4037
    device_class: humidity
    unit_of_measurement: "%"
    value_type: U_WORD  
    accuracy_decimals: 0
    state_class: measurement

  - id: brink_dewpoint_to_inside
    name: ${brink_dewpoint_to_inside}
    platform: template
    lambda: |-
        return (243.5*(log(id(brink_humidity_to_inside).state/100)+((17.67*id(brink_temp_to_inside).state)/
        (243.5+id(brink_temp_to_inside).state)))/(17.67-log(id(brink_humidity_to_inside).state/100)-
        ((17.67*id(brink_temp_to_inside).state)/(243.5+id(brink_temp_to_inside).state))));
    unit_of_measurement: °C
    update_interval: 15s
    icon: 'mdi:thermometer-water'

  - id: brink_temp_to_outside
    name: ${brink_temp_to_outside}
    platform: modbus_controller
    modbus_controller_id: ${name}
    address: 4046
    device_class: temperature
    unit_of_measurement: "°C"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    state_class: measurement
    filters:
      - multiply: 0.1

  - id: brink_humidity_to_outside
    name: ${brink_humidity_to_outside}
    platform: modbus_controller
    modbus_controller_id: ${name}
    icon: mdi:water-percent
    register_type: read
    address: 4047
    device_class: humidity
    unit_of_measurement: "%"
    value_type: U_WORD  
    accuracy_decimals: 0
    state_class: measurement

  - id: brink_temp_from_outside  # NTC1
    name: ${brink_temp_from_outside}
    platform: modbus_controller
    modbus_controller_id: ${name}
    address: 4081
    device_class: temperature
    unit_of_measurement: "°C"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    state_class: measurement
    filters:
      - multiply: 0.1

  - id: brink_supply_pressure
    name: ${brink_supply_pressure}
    platform: modbus_controller
    modbus_controller_id: ${name}
    icon: mdi:gauge
    register_type: read
    address: 4023
    device_class: atmospheric_pressure
    unit_of_measurement: "Pa"
    value_type: S_WORD  
    accuracy_decimals: 0
    state_class: measurement
    filters:
      - multiply: 1.0
    
  - id: brink_exhaust_pressure
    name: ${brink_exhaust_pressure}
    platform: modbus_controller
    modbus_controller_id: ${name}
    icon: mdi:gauge
    register_type: read
    address: 4024
    device_class: atmospheric_pressure
    unit_of_measurement: "Pa"
    value_type: S_WORD  
    accuracy_decimals: 0
    state_class: measurement
    filters:
      - multiply: 1.0

  - id: brink_setpoint_inlet_volume
    name: ${brink_setpoint_inlet_volume}
    platform: modbus_controller
    modbus_controller_id: ${name}
    icon: mdi:fan
    address: 4031
    unit_of_measurement: "m3/h"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 0
    state_class: measurement
    filters:
      - multiply: 1.0

  - id: brink_current_inlet_volume
    name: ${brink_current_inlet_volume}
    platform: modbus_controller
    modbus_controller_id: ${name}
    icon: mdi:fan
    address: 4032
    unit_of_measurement: "m3/h"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 0
    state_class: measurement
    filters:
      - multiply: 1.0

  - id: brink_setpoint_outlet_volume
    name: ${brink_setpoint_outlet_volume}
    platform: modbus_controller
    modbus_controller_id: ${name}
    icon: mdi:fan
    address: 4041
    unit_of_measurement: "m3/h"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 0
    state_class: measurement
    filters:
      - multiply: 1.0

  - id: brink_current_outlet_volume
    name: ${brink_current_outlet_volume}
    platform: modbus_controller
    modbus_controller_id: ${name}
    icon: mdi:fan
    address: 4042
    unit_of_measurement: "m3/h"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 0
    state_class: measurement
    filters:
      - multiply: 1.0

  - id: brink_frost_heater_power
    name: ${brink_frost_heater_power}
    platform: modbus_controller
    modbus_controller_id: ${name}
    icon: mdi:penguin
    address: 4071
    unit_of_measurement: "%"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    state_class: measurement
    filters:
      - multiply: 1.0

  - id: brink_frost_fan_reduction
    name: ${brink_frost_fan_reduction}
    platform: modbus_controller
    modbus_controller_id: ${name}
    icon: mdi:penguin
    address: 4072
    unit_of_measurement: "%"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    state_class: measurement
    filters:
      - multiply: 1.0

  - id: brink_current_filter_hours
    name: ${brink_current_filter_hours}
    platform: modbus_controller
    modbus_controller_id: ${name}
    icon: mdi:clock-start
    address: 4115
    unit_of_measurement: ${hours}
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 0

  - id: brink_current_filter_days
    name: ${brink_current_filter_days}
    platform: modbus_controller
    modbus_controller_id: ${name}
    icon: mdi:clock-start
    address: 4115
    unit_of_measurement: ${days}
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 0
    filters:
      - multiply: 0.041667
    on_value:
      then:
        - sensor.template.publish:
            id: brink_exchange_filter_in
            state: !lambda |-
              return id(brink_filter_change_days).state - id(brink_current_filter_days).state;

  - id: brink_exchange_filter_in
    name: ${brink_exchange_filter_in}
    platform: template
    unit_of_measurement: ${days}
    accuracy_decimals: 0

  - id: brink_filter_m3_h
    name: ${brink_filter_m3_h}
    platform: modbus_controller
    modbus_controller_id: ${name}
    icon: mdi:clock-start
    address: 4116
    unit_of_measurement: "m3/h"
    register_type: read
    value_type: U_DWORD
    accuracy_decimals: 0
    state_class: total

  - id: brink_device_type
    name: ${brink_device_type}
    platform: modbus_controller
    modbus_controller_id: ${name}
    icon: mdi:penguin
    address: 4004
    unit_of_measurement: ""
    register_type: read
    value_type: U_WORD

text_sensor:
  - id: brink_status
    name: ${brink_status}
    platform: modbus_controller
    modbus_controller_id: ${name}
    register_type: read
    address: 4020
    raw_encode: NONE
    icon: mdi:home-heart
    skip_updates: 20
    lambda: |-
      uint16_t int_mode = (data[item->offset] << 8) + data[item->offset+1];
      ESP_LOGD("main","Parsed operation mode int : %d", int_mode);
      std::string mode_str;
      switch (int_mode) {
        case 0:  mode_str = "Standby"; break;
        case 1:  mode_str = "Bootloader"; break;        
        case 2:  mode_str = "Non Blocking Error"; break;
        case 3:  mode_str = "Blocking Error"; break;
        case 4:  mode_str = "Manual"; break;
        case 5:  mode_str = "Holiday"; break;
        case 6:  mode_str = "Night ventilation"; break;
        case 7:  mode_str = "Party"; break;
        case 8:  mode_str = "Bypass Boost"; break; 
        case 9:  mode_str = "Normal Boost"; break; 
        case 10:  mode_str = "Auto CO2"; break; 
        case 11:  mode_str = "Auto eBus"; break; 
        case 12:  mode_str = "Auto Modbus"; break; 
        case 13:  mode_str = "Auto Lan/ Wlan portal"; break; 
        case 14:  mode_str = "Auto Lan/ Wlan local"; break;                                                         
      }
      return mode_str;
  
  - id: brink_bypass_status
    name: ${brink_bypass_status}
    platform: modbus_controller
    modbus_controller_id: ${name}
    register_type: read
    address: 4050
    raw_encode: NONE
    icon: mdi:valve
    skip_updates: 20
    lambda: |-
      uint16_t int_mode = (data[item->offset] << 8) + data[item->offset+1];
      std::string mode_str;
      switch (int_mode) {
        case 0:  mode_str = "${initialize}"; break;
        case 1:  mode_str = "${opening}"; break;
        case 2:  mode_str = "${closing}"; break;
        case 3:  mode_str = "${open}"; break;
        case 4:  mode_str = "${closed}"; break;
        case 255:  mode_str = "${error}"; break;
        default: mode_str = "${unknown}"; break;
       }
      return mode_str;

  - id: brink_frost_status
    name: ${brink_frost_status}
    platform: modbus_controller
    modbus_controller_id: ${name}
    register_type: read
    address: 4070
    raw_encode: NONE
    icon: mdi:penguin
    skip_updates: 20
    lambda: |-
      uint16_t int_mode = (data[item->offset] << 8) + data[item->offset+1];
      ESP_LOGD("main","Parsed operation mode int : %d", int_mode);
      std::string mode_str;
      switch (int_mode) {
        case 0:  mode_str = "Initialize"; break;
        case 1:  mode_str = "PowerUp Delay"; break;
        case 2:  mode_str = "No Frost"; break;
        case 3:  mode_str = "NoFrost Delay"; break;
        case 4:  mode_str = "FrostControl Start Delay"; break;
        case 5:  mode_str = "Wait For Icing"; break;
        case 6:  mode_str = "Ice Detected Delay"; break;
        case 7:  mode_str = "Heating"; break;
        case 8:  mode_str = "Wait for Free Heater"; break;
        case 9:  mode_str = "FanControl Start Delay"; break;
        case 10:  mode_str = "FanControl Wait Delay"; break;
        case 11:  mode_str = "FanControl"; break;
        case 12:  mode_str = "Fan Off Delay"; break;
        case 13:  mode_str = "Fan Off"; break;
        case 14:  mode_str = "Fan Restarting"; break;
        case 15:  mode_str = "Error"; break;
        case 16:  mode_str = "Test modus"; break;
        default: mode_str = "${unknown}"; break;
       }
      return mode_str;

  - id: brink_filter_status
    name: ${brink_filter_status}
    platform: modbus_controller
    modbus_controller_id: ${name}
    register_type: read
    address: 4100
    raw_encode: NONE
    icon: mdi:air-filter
    skip_updates: 20
    lambda: |-
      uint16_t int_mode = (data[item->offset] << 8) + data[item->offset+1];
      ESP_LOGD("main","Parsed operation mode int : %d", int_mode);
      std::string mode_str;
      switch (int_mode) {
        case 0:  mode_str = "${not_dirty}"; break;
        case 1:  mode_str = "${dirty}";
      }
      return mode_str;

select:
  - id: brink_modbus_control_mode
    name: Modbus Control Mode
    platform: modbus_controller
    modbus_controller_id: ${name} 
    address: 8000
    value_type: S_WORD
    optimistic: true
    skip_updates: 20
    optionsmap:
      "Device LCD": 0      
      "Modbus Step": 1
      "Modbus Flow": 2
    on_value:
        then:
          - lambda: |-
              std::string current_mode_str = id(brink_modbus_control_mode).state;
              std::string requested_mode_str = x;  // 'x' is the requested mode value

              // Convert strings to integers using the options map
              int current_mode = 0;
              if (current_mode_str == "Device LCD") {
                current_mode = 0;
              } else if (current_mode_str == "Modbus Step") {
                current_mode = 1;
              } else if (current_mode_str == "Modbus Flow") {
                current_mode = 2;
              }

              int requested_mode = 0;
              if (requested_mode_str == "Device LCD") {
                requested_mode = 0;
              } else if (requested_mode_str == "Modbus Step") {
                requested_mode = 1;
              } else if (requested_mode_str == "Modbus Flow") {
                requested_mode = 2;
              }

              if (current_mode == requested_mode) {
                ESP_LOGI("control mode", "Control mode already set, no switching needed.");
                return;  // Prevent switching if the mode is already active
              }

              ESP_LOGI("Control mode", "Control mode to: %d", requested_mode);
              esphome::modbus_controller::ModbusController *controller = id(${name});
              auto set_value_cmd = esphome::modbus_controller::ModbusCommandItem::create_write_single_command(
                controller, 8000, requested_mode);
              delay(20) ;
              controller->queue_command(set_value_cmd); 

  - id: brink_bypass_mode
    name: Bypass Mode
    platform: modbus_controller
    modbus_controller_id: ${name}  
    address: 6100
    value_type: S_WORD
    skip_updates: 20
    optionsmap:
      ${auto}: 0
      ${closed}: 1
      ${open}: 2
    on_value:
        then:
          - lambda: |-
              std::string current_mode_str = id(brink_bypass_mode).state;
              std::string requested_mode_str = x;  // 'x' is the requested mode value

              // Convert strings to integers using the options map
              int current_mode = 0;
              if (current_mode_str == "${auto}") {
                current_mode = 0;
              } else if (current_mode_str == "${closed}") {
                current_mode = 1;
              } else if (current_mode_str == "${open}") {
                current_mode = 2;
              }

              int requested_mode = 0;
              if (requested_mode_str == "${auto}") {
                requested_mode = 0;
              } else if (requested_mode_str == "${closed}") {
                requested_mode = 1;
              } else if (requested_mode_str == "${open}") {
                requested_mode = 2;
              }

              if (current_mode == requested_mode) {
                ESP_LOGI("bypass", "Bypass mode already set, no switching needed.");
                return;  // Prevent switching if the mode is already active
              }

              // Add any other conditions to prevent switching, such as external states
              // if (external_condition_is_true()) {
              //   ESP_LOGI("bypass", "External condition met, switching is blocked.");
              //   return;
              // }

              ESP_LOGI("bypass", "Switching bypass mode to: %d", requested_mode);
              esphome::modbus_controller::ModbusController *controller = id(${name});
              auto set_value_cmd = esphome::modbus_controller::ModbusCommandItem::create_write_single_command(
                controller, 6100, requested_mode);
              delay(20) ;
              controller->queue_command(set_value_cmd); 

switch:
  - id: brink_bypass_boost
    name: Bypass Boost
    platform: modbus_controller
    modbus_controller_id: ${name}
    register_type: holding
    address: 6104
    bitmask: 1
    entity_category: config
    icon: mdi:toggle-switch

  - id: brink_reset_filter
    name: Reset Filter
    platform: modbus_controller
    modbus_controller_id: ${name}
    register_type: holding  
    address: 8010
    bitmask: 1
    icon: mdi:toggle-switch
    disabled_by_default: true

  - id: brink_standby_switch
    name: ${brink_standby_switch}
    platform: template
    optimistic: true
    on_turn_on:
      then:
        - lambda: |-
            esphome::modbus_controller::ModbusController *controller = id(${name});
            auto set_value_cmd = esphome::modbus_controller::ModbusCommandItem::create_write_single_command(
              controller, 8003, 1);
            delay(20) ;
            controller->queue_command(set_value_cmd);    
    on_turn_off:
      then:
        - lambda: |-
            esphome::modbus_controller::ModbusController *controller = id(${name});
            auto set_value_cmd = esphome::modbus_controller::ModbusCommandItem::create_write_single_command(
              controller, 8003, 2);
            delay(20) ;
            controller->queue_command(set_value_cmd);

button:
  - id: brink_reset_filter_button
    name: Filter reset
    platform: template
    on_press:
      then:
        - switch.turn_on: brink_reset_filter
        - delay: 2s
        - switch.turn_off: brink_reset_filter
        - text_sensor.template.publish:
            id: brink_filter_reset_on
            state: !lambda |-
              char str[22];
              time_t currTime = id(brink_sntp_time).now().timestamp;
              strftime(str, sizeof(str), "%a %d %b %H:%M", localtime(&currTime));
              return  { str };


## temporarely test button for Step modbus mode after reboot or powerloss
#  - id: brink_step_modbus
#    name: Set Modbus Control Mode - Switch
#    platform: template
#    on_press:
#      then:
#        - lambda: |-
#            auto new_value = 1;
#
#            esphome::modbus_controller::ModbusController *controller = id(${name});
#            auto set_value_cmd = esphome::modbus_controller::ModbusCommandItem::create_write_single_command(
#              controller, 8000, new_value);
#
#            delay(20) ;
#            controller->queue_command(set_value_cmd);
#            ESP_LOGI("ModbusLambda", "Brink Modbus Step set");

number:
  # If the bypass boost function is activated, the bypass opens and the fan will run at this preset setting.
  - id: brink_bypass_boost_switch_position
    name: ${brink_bypass_boost_switch_position}
    platform: modbus_controller
    modbus_controller_id: ${name}  
    address: 6105
    value_type: S_WORD      
    min_value: 0
    max_value: 3
    mode: slider
    icon: mdi:fan

  - id: brink_modbus_flow_step
    name: ${brink_modbus_flow_step}
    platform: modbus_controller
    modbus_controller_id: ${name}
    register_type: holding
    address: 8001
    value_type: S_WORD      
    min_value: 0
    max_value: 3
    mode: slider
    icon: mdi:fan
 
  - id: brink_imbalance_intake
    name: ${brink_imbalance_intake}
    platform: modbus_controller
    modbus_controller_id: ${name}
    address: 6035
    unit_of_measurement: "%"
    value_type: S_WORD   
    multiply: 10    
    min_value: -15
    max_value: 15
    mode: slider
    icon: mdi:home-import-outline

##  BYPASS OPEN
##  ▪ De buitentemperatuur is hoger dan 10°C (instelbaar tussen 7°C en 15°C) EN
##  ▪ de buitentemperatuur is lager dan de binnentemperatuur uit de woning EN
##  ▪ de binnentemperatuur uit woning is hoger dan 24°C ( instelbaar tussen 15°C en 35°C )

##  BYPASS DICHT
##  ▪ De buitentemperatuur is lager dan 10° (instelbaar tussen 7°C en 15°C) C OF
##  ▪ de buitentemperatuur is hoger dan de binnentemperatuur uit de woning OF
##  ▪ de temperatuur uit de woning is lager dan de ingestelde temperatuur
##    minus de ingestelde temperatuur bij de hysterese

  - id: brink_bypass_from_dwelling ## van binnen naar buitenuitblaas, default 24 °C
    name: ${brink_bypass_from_dwelling}
    platform: modbus_controller
    modbus_controller_id: ${name}
    address: 6101
    device_class: temperature
    unit_of_measurement: "°C"
    value_type: S_WORD
    min_value: 15
    max_value: 35
    step: 0.5
    multiply: 10
    mode: slider
    icon: mdi:home-export-outline

  - id: brink_bypass_from_outside ## van buiten naar binnen aanzuig, default 10 °C
    name: ${brink_bypass_from_outside}
    platform: modbus_controller
    modbus_controller_id: ${name}
    address: 6102
    device_class: temperature
    unit_of_measurement: "°C"
    value_type: S_WORD
    min_value: 7
    max_value: 15
    step: 0.5
    multiply: 10
    mode: slider
    icon: mdi:home-import-outline

  - id: brink_bypass_hysteresis ## default 2 °C
    name: ${brink_bypass_hysteresis}
    platform: modbus_controller
    modbus_controller_id: ${name}
    address: 6103
    unit_of_measurement: "°C"
    device_class: temperature
    value_type: S_WORD
    min_value: 0
    max_value: 5
    step: 0.5
    multiply: 10
    mode: slider
    icon: mdi:home-edit-outline

### Vorstbeveiliging
  - id: brink_frost_control_temperature ## default 0 °C
    name: ${brink_frost_control_temperature}
    platform: modbus_controller
    modbus_controller_id: ${name}
    address: 6110
    unit_of_measurement: "°C"
    device_class: temperature
    value_type: S_WORD      
    min_value: -1.5
    max_value: 1.5
    step: 0.5
    multiply: 10
    mode: slider
    icon: mdi:home-export-outline

  - id: brink_frost_minimum_inlet_temperature  ## default 10 °C
    name: ${brink_frost_minimum_inlet_temperature}
    platform: modbus_controller
    modbus_controller_id: ${name}
    address: 6111
    device_class: temperature
    unit_of_measurement: "°C"
    value_type: S_WORD      
    min_value: 7
    max_value: 17
    step: 0.5
    multiply: 10
    mode: slider
    icon: mdi:home-export-outline

  - id: brink_imbalance_exhaust  ## default 0
    name: ${brink_imbalance_exhaust}
    platform: modbus_controller
    modbus_controller_id: ${name}
    address: 6036
    unit_of_measurement: "%"
    value_type: S_WORD      
    multiply: 10 
    min_value: -15
    max_value: 15
    mode: slider
    icon: mdi:home-export-outline

  - id: brink_filter_change_days
    name:  ${brink_filter_change_days}
    platform: modbus_controller
    modbus_controller_id: ${name}
    register_type: holding
    address: 6120
    unit_of_measurement: ""
    value_type: S_WORD      
    min_value: 0
    max_value: 365
    mode: slider
    icon: mdi:timer-sync-outline

###
## M5Stack atom S3 lite board powered by 12VDC/GND connection to 24VDC/GND from Brink, in combination with this base from m5stack:
## https://shop.m5stack.com/products/atomic-rs485-base
## NOTE: there are other RS485 boards from m5stack, these are not tested (like the tail-rs485)
#
esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino
  variant: esp32s3
  flash_size: 8MB

# uart for modbus
uart:
  id: mod_bus
  baud_rate: 19200
  stop_bits: 1
  parity: even
  tx_pin: GPIO6
  rx_pin: GPIO5

# i2c for extra sensor
i2c:
  - id: bus_a
    sda: GPIO2
    scl: GPIO1

###  ESP restart button
button:
  - platform: restart
    id: restart_button
    name: Restart
    
# Enable/Disable logging
logger:
  logs:
    modbus_controller.sensor: WARN
    modbus_controller.output: WARN
    modbus.number: WARN
    esp32.preferences: WARN
    sensor: WARN
    text_sensor: WARN
    dht.sensor: WARN
    switch: WARN
    button: WARN
    number: WARN
    component: ERROR

wifi:
  ap:
    ssid: "${friendly_name}"
    password: "configesp"
    ap_timeout: 15s

#esp32_improv:
#  authorizer: None 
      
captive_portal:
  id: id_captive_portal

# Enable Web server.
web_server:
  port: 80

###############################################################################
## STATUS LED
###############################################################################
## Simple status led for Atom s3 (lite)
## G35=RGB WS2812C-2020
light:
  - platform: esp32_rmt_led_strip
    id: status_led
    name: Status led
    icon: mdi:lightbulb
    internal: true # Hides from Home Assistant
    rgb_order: GRB
    rmt_channel: 0
    pin: 35
    num_leds: 4
    chipset: ws2812
#    rmt_channel: 0 #only on platform: arduino
    restore_mode: ALWAYS_OFF
    entity_category: diagnostic
    effects:
      - pulse:
          name: slow_pulse
          transition_length: 250ms
          update_interval: 500ms
          min_brightness: 10%
          max_brightness: 50%
      - pulse:
          name: fast_pulse
          transition_length: 100ms
          update_interval: 100ms
          min_brightness: 25%
          max_brightness: 100%

# ðŸŸ¢ Green on => wifi connected- api connected/ Green blinking => wifi connected - api disconnected
# ðŸŸ£ Purple => wifi disconnected
# ðŸ”µ Blue => AP mode

interval:
  - interval: 10s
    then:
      if:
        condition:
          wifi.connected:
        then:
          if:
            condition:
              api.connected:
            then:
              - light.turn_on:
                  id: status_led
                  brightness: 50%
                  red: 0
                  green: 100%
                  blue: 0
                  effect: None
            else:
              - light.turn_on:
                  id: status_led
                  brightness: 50%
                  red: 0
                  green: 100%
                  blue: 0
                  effect: slow_pulse              
        else:
          if:
            condition:
              - lambda: 'return id(id_captive_portal).is_active();'
            then:
              - light.turn_on:
                  id: status_led
                  brightness: 100%
                  red: 0
                  green: 0
                  blue: 100%
            else:
              - light.turn_on:
                  id: status_led
                  brightness: 100%
                  red: 100%
                  green: 0
                  blue: 0

## knop op de atom ingedrukt houden = veranderen brightness
script:
  - id: adjust_brightness_loop
    mode: restart
    then:
      - repeat:
          count: 1000
          then:
            - lambda: |-
                static float brightness = 0.0;
                brightness += 0.1;
                if (brightness > 1.0) brightness = 0.0;
                auto call = id(status_led).make_call();
                call.set_brightness(brightness);
                call.perform();
            - delay: 750ms